#version 430

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

layout(location=0) uniform float time;
layout(location=1) uniform int depthLevel;
layout(location=2) uniform int workGroupWidth;
layout(location=3) uniform int screenArea;
layout(location=4) uniform vec4 ambientColour;

struct Ray
{
	vec4 origAndWght;
	vec4 dir;
	ivec4 pixelCoords; //And two padding
};

layout (std140) buffer rBuffer
{
  Ray rays[];
};

struct RayHit
{
	vec4 hitAndWeight;
	vec4 normal;
	vec4 rayDir;
	ivec4 pixelCoordsObjIdType;
};

layout (std140) buffer rHitBuffer
{
	RayHit hits[];
};

struct Material
{
	vec4 diffColAlpha;
	vec4 specDiffAmbiCoefShinness;
	vec4 refrIndexReflCoef; //And two padding
};

layout (std140) buffer sMatBuffer
{
	Material materials[];
};

struct Light 
{
	vec4 lightPosCount;
	vec4 lightColor;
};

layout (std140) buffer sLightBuffer
{
	Light lights[];
};


//===========AUXILIAR=FUNCTIONS===========//
//These are implemented in hardware, that's why they could use vec4s
//Could stack 4 values at a time for comparisong

//Returns 0 when x equals y and 1 when not
float when_neq(float x, float y) {
  return abs(sign(x - y));
}

vec4 shade(vec3 point, vec3 normal, vec3 rayDir, int objId) {

		//ambient
		float ka = materials[objId].specDiffAmbiCoefShinness.z;  //coeficient of ambient light
		vec4 ia = ambientColour * ka;
		vec4 final = ia;

		//diffuse
		float kd = materials[objId].specDiffAmbiCoefShinness.y; // coeficient of diffuse light
		vec4 diffuseColor = vec4(materials[objId].diffColAlpha.rgb, 1); // color from the object

		for (int i = 0; i < lights[0].lightPosCount.w; i++) {

			vec3 lightDir = normalize(lights[i].lightPosCount.xyz - point);
			float diffuse = max(dot(lightDir, normal), 0);
			vec4 id = kd * diffuse * diffuseColor * lights[i].lightColor;

			//specular TODO: review this
			float ks = materials[objId].specDiffAmbiCoefShinness.x;
			float specullarPower = materials[objId].specDiffAmbiCoefShinness.w;

			//Reflect = lightDir - 2 * normal * dot(normal, lightDir)
			//Ou normalize(2 * normal * dot(normal, lightDir) - lightDir) quando o raio vem da fonte de luz
			vec3 reflection = normalize(lightDir - 2 * normal * diffuse);
			float specular = max(abs(pow(dot(reflection, rayDir), specullarPower)), 0);
			
			vec4 is = ks * specular * lights[i].lightColor;

			final += id + is;
		}

		return final;
}

void main() {
	// base pixel colour for image
	vec4 pixel = vec4(0);

	//Get working ray id
	const int hitId = int(gl_GlobalInvocationID.x*pow(2,depthLevel)+gl_GlobalInvocationID.y);

	//Get texture pixel coords from hit
	const ivec2 pixelCoords = hits[hitId].pixelCoordsObjIdType.xy;

	//Get object id from hit
	const int objId = hits[hitId].pixelCoordsObjIdType.z;
	
	const float rayContribution = hits[hitId].hitAndWeight.w;

	if (objId != -1 || rayContribution == 0) //TODO: OPTIMIZE THIS!
	{
		vec3 hitPos = hits[hitId].hitAndWeight.xyz;
		vec3 hitNor = hits[hitId].normal.xyz;
		vec3 rayDir = hits[hitId].rayDir.xyz;
		
		//Do proper shading
		pixel = mix(vec4(0), shade(hitPos, hitNor, rayDir, objId), materials[objId].diffColAlpha.a);
		
		//Reflection
		vec3 reflectedRayDir = reflect(rayDir, hitNor);
		float reflectContribution = rayContribution * materials[objId].refrIndexReflCoef.y;
		
		rays[hitId*2+0] = Ray(vec4(hitPos, reflectContribution), vec4(reflectedRayDir, 0), pixelCoords.xyxy);

		//Refraction
		vec3 refractRayDir = refract(rayDir, hitNor, materials[objId].refrIndexReflCoef.x);
		float refractContribution = rayContribution * (1.0 - materials[objId].diffColAlpha.w);

		rays[hitId*2+1] = Ray(vec4(hitPos, refractContribution), vec4(refractRayDir, 0), pixelCoords.xyxy);
	}
	else
	{
		rays[hitId*2+0] = Ray(vec4(0), vec4(0), pixelCoords.xyxy);
		rays[hitId*2+1] = Ray(vec4(0), vec4(0), pixelCoords.xyxy);
	}

	//"clear" hit id and depth
	hits[hitId].pixelCoordsObjIdType.z = -1;
	hits[hitId].rayDir.w = 1000000.0f;

	//Get last pass pixel (only if this is not the first pass)
	vec4 lastPixel = imageLoad(img_output, pixelCoords) * step(1, depthLevel);

	//Calculate final pass pixel
	vec4 outPixel = lastPixel + pixel * rayContribution;

	imageStore(img_output, pixelCoords, outPixel);

}
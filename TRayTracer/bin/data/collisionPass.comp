#version 430

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(location=0) uniform float time;
layout(location=1) uniform int spheresCount;
layout(location=2) uniform int workGroupWidth;
layout(location=3) uniform int workGroupHeight;
layout(location=4) uniform int depthLevel;
layout(location=5) uniform mat4 cameraRot;
layout(location=6) uniform vec4 cameraPos;

struct Ray
{
	vec4 origAndWght;
	vec4 dir;
	ivec4 pixelCoords; //And two padding
};

layout (std140) buffer rBuffer
{
  Ray rays[];
};

struct RayHit
{
	vec4 hitAndWeight;
	vec4 normal;
	vec4 rayDir;
	ivec4 pixelCoordsObjIdType;
};

layout (std140) buffer rHitBuffer
{
	RayHit hits[];
};

struct Spheres
{
	vec4 posAndScale;
};

layout (std140) buffer sBuffer
{
	Spheres spheres[];
};

layout (std140) buffer vBuffer
{
	vec4 vertices[];
};

layout (std140) buffer nBuffer
{
	vec4 normals[];
};

struct Triangle
{
	uvec4 vIdmId;
	uvec4 nId;
};

layout (std140) buffer tBuffer
{
	Triangle triangles[];
};

void main()
{
	//Get working ray id
	const int rayId = int(gl_GlobalInvocationID.x);

	//Stop raycast if it has no weight
	if(rays[rayId].origAndWght.w == 0)
		return;

	//Get working triangle id
	const int triangleId = int(gl_GlobalInvocationID.y);

	//Local group invocation ID (for serialization)
	const int invocationId = int(gl_LocalInvocationID.y);

	//Get triangle vertices
	vec3 v1 = vertices[triangles[triangleId].vIdmId[0]].xyz; //First Vertex
	vec3 v2 = vertices[triangles[triangleId].vIdmId[1]].xyz; //Second Vertex
	vec3 v3 = vertices[triangles[triangleId].vIdmId[2]].xyz; //Third Vertex

	//Get triangle side vectors
	vec3 tu = v2-v1;	//Triangle U component
	vec3 tv = v3-v1;	//Triangle V component

	//Get ray info
	ivec2 pixelCoords = rays[rayId].pixelCoords.xy;
	vec3 rayOrigin = rays[rayId].origAndWght.xyz;
	vec3 rayDir = rays[rayId].dir.xyz;

	//=====Solve for collision=====//
	//Triangle origin to ray origin vector

	//Determinant for inverse matrix
	dvec3 q = cross(rayDir, tv);
	double det = dot(tu, q);
//	if(det > -0.0000001 && det < 0.0000001) //If too close to zero
//		return;
	double invdet = 1.0/det;

	//Solve component parameters
	dvec3 s = rayOrigin - v1;
	double u = dot(s, q) * invdet;
	if(u < 0)
		return;

	dvec3 r = cross(s, tu);
	double v = dot(rayDir, r) * invdet;
	if(v < 0)
		return;

	if((u+v) > 1)
		return;

	double t = dot(tv, r) * invdet;
	if(t <= 0)
		return;

	//Check for closest hit
	if(hits[rayId].rayDir.w > t)
	{
		//Get triangle vertices
		vec3 n1 = normals[triangles[triangleId].vIdmId[0]].xyz; //First Vertex
		vec3 n2 = normals[triangles[triangleId].vIdmId[1]].xyz; //Second Vertex
		vec3 n3 = normals[triangles[triangleId].vIdmId[2]].xyz; //Third Vertex
		vec3 normal = n1 * (1.0-float(u+v)) + n2 * float(u) + n3 * float(v);
		normal = normalize(normal);

		//Calculate hit point
		dvec3 hit = v1 + tu * u + tv * v;
		hits[rayId] = RayHit(vec4(hit, rays[rayId].origAndWght.w), vec4(normal, 0), vec4(rayDir, t), ivec4(pixelCoords.xy, triangles[triangleId].vIdmId.w, 1));
	}
}

#version 430

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(location=0) uniform float time;
layout(location=1) uniform int spheresCount;
layout(location=2) uniform int workGroupWidth = 1920;
layout(location=3) uniform int workGroupHeight = 1080;
layout(location=4) uniform int depthLevel;

struct Ray
{
	vec4 origAndWght;
	vec4 dir;
	ivec4 pixelCoords; //And two padding
};

layout (std140) buffer rBuffer
{
  Ray rays[];
};

struct RayHit
{
	vec4 hitAndWeight;
	vec4 normal;
	vec4 viewDir;
	ivec4 pixelCoordsObjIdType;
};

layout (std140) buffer rHitBuffer
{
	RayHit hits[];
};

struct Spheres
{
	vec4 posAndScale;
};

layout (std140) buffer sBuffer
{
	Spheres spheres[];
};

//===========AUXILIAR=FUNCTIONS===========//
//These are implemented in hardware, that's why they use vec4s
//Could stack 4 values at a time for comparisong

//Returns 1 when x equals y and 0 when not
vec4 when_eq(vec4 x, vec4 y) {
  return 1.0 - abs(sign(x - y));
}

//Returns 0 when x equals y and 1 when not
vec4 when_neq(vec4 x, vec4 y) {
  return abs(sign(x - y));
}

//Returns 1 when x is greater then y and 0 when equal or smaller
vec4 when_gt(vec4 x, vec4 y) {
  return max(sign(x - y), 0.0);
}

//Returns 0 when x is greater or equal then y and 1 when smaller
vec4 when_le(vec4 x, vec4 y) {
  return 1.0 - when_gt(x, y);
}


void main()
{
	// base pixel colour for image
	vec4 pixel = const vec4(0.0f, 0.4509803921568627f, 0.8980392156862745f, 1.0f);

	//Get working ray id
	const int rayId = int(gl_GlobalInvocationID.x);

	//Create ray's if first depth pass
	if(depthLevel == 0)
	{
		const vec2 screenSize = vec2(workGroupWidth, workGroupHeight);
		const float aspectRatio = screenSize.x / screenSize.y;
		const float fov = 33.0; //get this from options
		const float fovScale = tan(radians(fov * 0.5));
		const ivec2 screen_coord = ivec2(mod(rayId, workGroupWidth), rayId/workGroupWidth);
		const vec4 origin = { 0, 0, 20, 1 };

		const float x = (2.0 * (screen_coord.x + 0.5) / screenSize.x - 1.0) * aspectRatio * fovScale;
		const float y = (1.0 - 2.0 * (screen_coord.y + 0.5) / screenSize.y) * fovScale;
		vec3 dir = vec3( x, y, -1.0f );
		dir = normalize(dir);

		//Create ray in memory
		rays[rayId].origAndWght = origin;
		rays[rayId].dir = vec4(dir, 0);
		rays[rayId].pixelCoords = screen_coord.xyxy;
	}

	//Get ray info
	const ivec2 pixelCoords = rays[rayId].pixelCoords.xy;
	const vec3 rayOrigin = rays[rayId].origAndWght.xyz;
	const vec3 rayDir = rays[rayId].dir.xyz;

	int indexClosestSphere = -1;
	float closestDelta = 4294967296.0;

	//TODO: use float variables as IDs when possible and do comparations 4 by 4 (hardware implemented)
	for(int i = 0; i < spheresCount; i++)
	{
		//define sphere
		vec3 sphereCenter = spheres[i].posAndScale.xyz;
		float sphereRadius = spheres[i].posAndScale.w;

		//region collision with sphere
		vec3 omc = rayOrigin - sphereCenter; 
		float b = dot(rayDir, omc);
		float c = dot(omc, omc) - sphereRadius * sphereRadius;
		float delta = b * b - c;

		//When delta is positive, calculate hitT, otherwise leave zero
		float hitT = step(0, delta) * (-b - delta); //SMALL PERFORMANCE GAIN WITH THIS ONE

		//PERFORMANCE LOST WITH THIS ONE - TODO: EVALUATE THIS AND TRY MORE PERFORMANCE GAINS
		//Returns 1 when hit is the closest hit and 0 when not
//		float isClosestHit = (step(hitT, closestDelta)*(1-step(hitT, 1)));
//		indexClosestSphere = mix(i, indexClosestSphere, (1 - isClosestHit));
//		closestDelta = mix(hitT, closestDelta, 1-isClosestHit);

		// hit one or both sides
//		if (delta >= 0.0) {			<======OPTIMIZED!
//			hitT = -b - delta;
			if (hitT < closestDelta && hitT > 1) { //TODO: OPTIMIZE THIS!
				indexClosestSphere = i;
				closestDelta = hitT;
			}
//		}
	}

	if(indexClosestSphere != -1)
	{
		vec3 sphereCenter = spheres[indexClosestSphere].posAndScale.xyz;
		//vec3 sphereCenter = vec3(indexClosestSphere * 5 - 15, sin(time + indexClosestSphere*0.5f) * 3, -10.0);
		float sphereRadius = spheres[indexClosestSphere].posAndScale.w;

		vec3 hit = rayOrigin + rayDir * closestDelta;
		vec3 normal = (hit-sphereCenter);
		normal = normalize(normal);

		//Store data in Raycast Hit structures
		hits[rayId] = RayHit(vec4(hit, rays[rayId].origAndWght.w), vec4(normal, 0), vec4(rayDir, 0), ivec4(pixelCoords.xy, indexClosestSphere, 1));

	}
	else
	{
		hits[rayId] = RayHit(rays[rayId].origAndWght, vec4(rayDir, 0), vec4(rayDir, 0), ivec4(pixelCoords.xy, indexClosestSphere, 1));
	}
}